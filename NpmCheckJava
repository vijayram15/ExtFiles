pom.xml
-----------
<dependencies>
    <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.5.13</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.12.3</version>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-csv</artifactId>
        <version>1.8</version>
    </dependency>
<dependency>
    <groupId>org.semver4j</groupId>
    <artifactId>semver4j</artifactId>
    <version>5.4.1</version>
</dependency>

</dependencies>

java class
----------
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.http.HttpHost;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class DependencyChecker {

    private static final String REACT_VERSION = "16.8.6";
    private static final String PROXY_HOST = "ss.org";
    private static final int PROXY_PORT = 80;
    private static final String REGISTRY_URL = "https://your-jfrog-registry-url/artifactory/api/npm/npm-repo";

    public static void main(String[] args) throws IOException, InterruptedException {
        String packageJsonPath = "package.json";
        cleanUnusedDependencies();
        updateDependencies(packageJsonPath, REACT_VERSION);
    }

    private static void cleanUnusedDependencies() throws IOException, InterruptedException {
        ProcessBuilder processBuilder = new ProcessBuilder("npx", "depcheck");
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();
        process.waitFor();
        List<String> unusedDeps = Files.readAllLines(Paths.get("depcheck-output.txt"));
        for (String dep : unusedDeps) {
            new ProcessBuilder("npm", "uninstall", dep).start().waitFor();
        }
    }

    private static void updateDependencies(String packageJsonPath, String reactVersion) throws IOException {
        byte[] jsonData = Files.readAllBytes(Paths.get(packageJsonPath));
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode packageJson = objectMapper.readTree(jsonData);

        JsonNode dependencies = packageJson.path("dependencies");
        JsonNode devDependencies = packageJson.path("devDependencies");

        List<DependencyInfo> results = new ArrayList<>();

        Iterator<Map.Entry<String, JsonNode>> fields = dependencies.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> entry = fields.next();
            String packageName = entry.getKey();
            String currentVersion = entry.getValue().asText();
            String latestVersion = getLatestCompatibleVersion(packageName, reactVersion);
            String peerDepVersion = getPeerDependencyVersion(packageName, latestVersion);

            results.add(new DependencyInfo(packageName, currentVersion, peerDepVersion, latestVersion));
        }

        fields = devDependencies.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> entry = fields.next();
            String packageName = entry.getKey();
            String currentVersion = entry.getValue().asText();
            String latestVersion = getLatestCompatibleVersion(packageName, reactVersion);
            String peerDepVersion = getPeerDependencyVersion(packageName, latestVersion);

            results.add(new DependencyInfo(packageName, currentVersion, peerDepVersion, latestVersion));
        }

        // Update package.json
        PackageJsonUpdater.updatePackageJson(packageJsonPath, updatedDependencies, updatedDevDependencies);
        
        // Write results to CSV
        writeResultsToCSV(results);
    }

    private static String getLatestCompatibleVersion(String packageName, String reactVersion) throws IOException {
        String url = REGISTRY_URL + "/" + packageName;
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpHost proxy = new HttpHost(PROXY_HOST, PROXY_PORT);
        RequestConfig config = RequestConfig.custom().setProxy(proxy).build();
        HttpGet request = new HttpGet(url);
        request.setConfig(config);

        try (CloseableHttpResponse response = httpClient.execute(request)) {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(response.getEntity().getContent());
            JsonNode versions = rootNode.path("versions");

            Iterator<Map.Entry<String, JsonNode>> fields = versions.fields();
            while (fields.hasNext()) {
                Map.Entry<String, JsonNode> entry = fields.next();
                String version = entry.getKey();
                JsonNode peerDependencies = entry.getValue().path("peerDependencies");
                if (peerDependencies.has("react")) {
                    String reactRange = peerDependencies.path("react").asText();
                    if (semverMatch(reactVersion, reactRange)) {
                        return version;
                    }
                }
            }
        }
        return null;
    }

    private static String getPeerDependencyVersion(String packageName, String version) throws IOException {
        if (version == null) return null;
        String url = REGISTRY_URL + "/" + packageName + "/" + version;
        CloseableHttpClient httpClient = HttpClients.createDefault();
        HttpHost proxy = new HttpHost(PROXY_HOST, PROXY_PORT);
        RequestConfig config = RequestConfig.custom().setProxy(proxy).build();
        HttpGet request = new HttpGet(url);
        request.setConfig(config);

        try (CloseableHttpResponse response = httpClient.execute(request)) {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(response.getEntity().getContent());
            JsonNode peerDependencies = rootNode.path("peerDependencies");
            return peerDependencies.path("react").asText(null);
        }
    }

    private static boolean semverMatch(String version, String range) {
        boolean isMatch = SemverUtils.semverMatch(version,range);
        System.out.println("Version match: " + isMatch);
        return isMatch;
    }

    private static void writeResultsToCSV(List<DependencyInfo> results) throws IOException {
        try (CSVPrinter printer = new CSVPrinter(new FileWriter("dependency_report.csv"), CSVFormat.DEFAULT.withHeader("Package", "Current Version", "Peer Dependency Version", "New Compatible Version"))) {
            for (DependencyInfo info : results) {
                printer.printRecord(info.packageName, info.currentVersion, info.peerDepVersion, info.latestVersion);
            }
        }
    }

    static class DependencyInfo {
        String packageName;
        String currentVersion;
        String peerDepVersion;
        String latestVersion;

        DependencyInfo(String packageName, String currentVersion, String peerDepVersion, String latestVersion) {
            this.packageName = packageName;
            this.currentVersion = currentVersion;
            this.peerDepVersion = peerDepVersion;
            this.latestVersion = latestVersion;
        }
    }
}

---------------

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import java.io.File;
import java.io.IOException;
import java.util.Map;

public class PackageJsonUpdater {

    public static void updatePackageJson(String packageJsonPath, Map<String, String> updatedDependencies, Map<String, String> updatedDevDependencies) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode packageJson = objectMapper.readTree(new File(packageJsonPath));

        // Update dependencies
        JsonNode dependenciesNode = packageJson.path("dependencies");
        if (dependenciesNode.isObject()) {
            ObjectNode dependenciesObjectNode = (ObjectNode) dependenciesNode;
            for (Map.Entry<String, String> entry : updatedDependencies.entrySet()) {
                dependenciesObjectNode.put(entry.getKey(), entry.getValue());
            }
        }

        // Update devDependencies
        JsonNode devDependenciesNode = packageJson.path("devDependencies");
        if (devDependenciesNode.isObject()) {
            ObjectNode devDependenciesObjectNode = (ObjectNode) devDependenciesNode;
            for (Map.Entry<String, String> entry : updatedDevDependencies.entrySet()) {
                devDependenciesObjectNode.put(entry.getKey(), entry.getValue());
            }
        }

        // Write the updated package.json back to the file
        objectMapper.writerWithDefaultPrettyPrinter().writeValue(new File(packageJsonPath), packageJson);
    }
}

-----------

import com.github.zafarkhaja.semver.Version;
import com.github.zafarkhaja.semver.expr.Expression;
import com.github.zafarkhaja.semver.expr.Expressions;

public class SemverUtils {

    public static boolean semverMatch(String version, String range) {
        try {
            Version semverVersion = Version.valueOf(version);
            Expression semverRange = Expressions.interpret(range);
            return semverRange.contains(semverVersion);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
}
